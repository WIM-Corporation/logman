*****************
Loki
*****************

Integrating Python Applications with Grafana Loki
=================================================

When aiming to send logs from your Python application to Grafana Loki, using a JSON format for logs can simplify label management and enhance log organization. `logman` facilitates this by leveraging Python's standard logging module to perform JSON formatting and store log files that can be tailed by agents.

This guide will walk you through the process of setting up `logman` to send logs to Loki using both Promtail and Grafana Agent.

Why JSON Formatting?
---------------------

JSON formatting allows for better structured logs, making it easier to parse and manage labels in Loki. With `logman`, you can seamlessly integrate JSON formatting into your Python application's logging setup.


Setup and Deployment
====================

In this section, we'll use a simple Python application that generates random numbers and logs them. We'll deploy this application and Promtail using Docker Compose. Promtail will track the log files and send them to Loki.

Step 1: Python Application
---------------------------

Create a simple Python application that logs random numbers. Save this as `main.py`:

.. code-block:: python

    import random
    import time
    import threading
    from logman import LoggerFactory

    class Foo:
        def __init__(self) -> None:
            self.logger = LoggerFactory.getLogger(self.__class__.__name__)

        def logRandomNumber(self) -> None:
            while True:
                self.logger.info(f"Generated random number: {random.randint(1, 10000)}")
                time.sleep(1)

    class Bar:
        def __init__(self) -> None:
            self.logger = LoggerFactory.getLogger(self.__class__.__name__)

        def logRandomNumber(self) -> None:
            while True:
                self.logger.info(f"Generated random number: {random.randint(1, 10000)}")
                time.sleep(1)

    if __name__ == "__main__":
        foo = Foo()
        bar = Bar()

        # Create threads for Foo and Bar logging
        foo_thread = threading.Thread(target=foo.logRandomNumber)
        bar_thread = threading.Thread(target=bar.logRandomNumber)

        # Start the threads
        foo_thread.start()
        bar_thread.start()

        # Join the threads to the main thread to keep them running
        foo_thread.join()
        bar_thread.join()

Step 2: Docker Compose Setup
----------------------------

Create a `docker-compose.yml` file to define the services. This setup will include the Python application and Promtail.

.. code-block:: yaml

    version: "3.8"
    services:
      app:
        build: .
        volumes:
          - logs:/app/logs
        environment:
          - PYTHONUNBUFFERED=1

      promtail:
        image: grafana/promtail
        volumes:
          - logs:/var/logs
          - ./promtail-config.yml:/etc/promtail/promtail-config.yml
        command: -config.file=/etc/promtail/promtail-config.yml

    volumes:
      logs:

Step 3: Promtail Configuration
------------------------------

Create a `promtail-config.yml` file to configure Promtail to send logs to Loki.

.. code-block:: yaml

    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki:3100/loki/api/v1/push

    scrape_configs:
      - job_name: logman
        static_configs:
          - targets:
              - localhost
            labels:
              job: pylogs
              __path__: /var/logs/*.log
              environment: production


Step 4: Build and Run
---------------------

Build and run the Docker Compose setup to start the Python application and Promtail.

.. code-block:: bash

    docker-compose up --build

This command builds the Docker images and starts the containers. Promtail will start tailing the log files generated by the Python application and send them to Loki.


Summary
=========

Using logman with JSON formatting simplifies the management of logs in your Python application. By integrating with tools like Promtail or Grafana Agent, you can efficiently send these logs to Grafana Loki for centralized logging and monitoring.

For more detailed examples and advanced configurations, explore the individual modules and classes in the documentation. If you have any questions or need further assistance, please feel free to reach out to our support team.

